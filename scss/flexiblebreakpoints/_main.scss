/* Simple Shadow Mixin Using SCSS Maps for text, box and inset shadows
 * @author Cody Reeves
 * @access public
 * @param $type - light or dark
 * @param $level - 1, 2, 3, 4, or 5 by default
 * -- Optional --
 * @param $shadow-style - add inset as last value in mixen for inner shadow
 * @param $text - set to text for text shadow
 * @param $text-color - if inset and text is enabled, $inset-text-hack has to be enabled (result not guarenteed) -colors the text
 * @return Desired Drop Shadow
 *
 * Usage  : @include shadow($type, $level, $shadow-style: null, $text: null, $text-color: null);
 *        : @include shadow(light, $shadow, inset);
 *        : @include shadow(t-shadow, 1, inset, text, $white);
 */

 /* Breakpoints
 ========================================================================== */

 /* Breakpoints Vars based on screen size
 ================================== */

 $xs: 768px !default;

 $sm: 768px !default;

 $md: 992px !default;

 $lg: 1280px !default;

 $xl: 1600px !default;

 $media-guery-xs: min-width sm !default;
 $media-query-sm: sm !default;
 $media-query-md: md !default;
 $media-query-lg: lg !default;
 $media-query-xl: xl !default;


 $queries: (
   xs: breakpoint($media-guery-xs),
   sm: breakpoint($media-query-sm),
   md: breakpoint($media-query-md),
   lg: breakpoint($media-query-lg),
   xl: breakpoint($media-query-xl)
 );

 $breakpoints: (
   'xs': $xs,
   'sm': $sm,
   'md': $md,
   'lg': $lg,
   'xl': $xl
 );



 /* Min-Width Breakpoints
 ==================================
 Leaving this here till new one is  fully tested
 @mixin breakpoint($point) {
   @if $point == lg {
     @media only screen and (min-width: $lg) { @content; }
   }
   @else if $point == md {
     @media only screen and (min-width: $md) { @content; }
   }
   @else if $point == sm {
     @media only screen and (min-width: $sm)  { @content; }
   }
   @else if $point == xl {
     @media only screen and (min-width: $xl)  { @content; }
   } @else {
     @warn 'Breakpoint size is not recognized';
   }
 }
 */

 /* Max-Width Breakpoints
    -- This will be left here to avoid breaking changes within framework
    TODO:: Deprecate this breakpoint next breaking change push.
 ================================== */

 @mixin max-breakpoint($point) {
   @if $point == lg {
     @media (max-width: $lg) { @content; }
   }
   @else if $point == md {
     @media (max-width: $md) { @content; }
   }
   @else if $point == sm {
     @media (max-width: $sm)  { @content; }
   }
   @else if $point == xl {
     @media (max-width: $xl)  { @content; }
   }
 }



 /* Breakpoint Mixen
 * ==================================
 * @param $queries: min-width max-width height min-height max-height key value
 * @param $type: media-type
 * @param $query-fallback: string selector class
 * @param $breakpoints: map created by dev
 * @return css media query
 */

 @mixin breakpoint($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {

   // Gets  map through breakpoint
   $map: breakpoint($queries, $type, $query-fallback, $breakpoints);

   // Outputs media string
   @media #{map-get($map, type)} and #{map-get($map, media-string)} {
     @content;
   }

   // If a query fallback is provided
   @if $query-fallback {
     #{$query-fallback} & {
       @content;
     }
   }
 }



 /* Query Mixen
 * ==================================
 * @return query from queries map
 */

 @mixin query($query, $queries: $queries) {
   @if not map-has-key($queries, $query) {
     @warn "#{$queries} does not contain #{$query}";
   }

   $map: map-get($queries, $query);

   @media #{map-get($map, type)} and #{map-get($map, media-string)} {
     @content;
   }

   // If a query fallback is provided
   @if map-get($map, query-fallback) {
     #{map-get($map, query-fallback)} & {
       @content;
     }
   }
 }


 /* List To String Function
 * ==================================
 * @parm $list:
 * @return $string
 */

 @function list-to-string($list, $glue: ' ') {
   $res: null;
   $len: length($list);

   @for $i from 1 through $len {
     $e: nth($list, $i);
     @if $i == $len {
       $res: unquote("#{$res}#{$e}");
     }
     @else {
       $res: unquote("#{$res}#{$e}#{$glue}");
     }
   }

   @return $res;
 }


 /* Parse Breakpoint
 * ==================================
 * @return map with 4 keys -
 * @returnKey min-width: {value}
 * @returnKey max-width: {value}
 * @returnKey min-height: {value}
 * @returnKey max-height: {value}
 */

 @function parse-breakpoint($queries, $breakpoints) {
   $return-value: ();
   $count: 1;
   $minWidth: null;
   $maxWidth: null;
   $minHeight: null;
   $maxHeight: null;
   $lengthValue: length($queries);

   $minWidth: nth($queries, 1);
   $minWidth: validate($minWidth, $breakpoints);

   //Check for width
   @if $minWidth {
     $minWidth: $minWidth;
     $return-value: map-merge($return-value, (min-width: $minWidth));
     $queries: set-nth($queries, 1, null);
   }

   //Checks max width
   @if $minWidth and $lengthValue >= 2 {
     $maxWidth: nth($queries, 2);
     $maxWidth: validate($maxWidth, $breakpoints);
   }

   @if $maxWidth {
     $maxWidth: $maxWidth - 1px;
     $return-value: map-merge($return-value, (max-width: $maxWidth));
     $queries: set-nth($queries, 2, null);
   }

   //Checks height
   $height: index($queries, height);

   @if $height {
     $minHeight: nth($queries, $height + 1);
     $minHeight: validate($minHeight, $breakpoints);

     @if $minHeight {
       $minHeight: $minHeight;
       $return-value: map-merge($return-value, (min-height: $minHeight));
       $queries: set-nth($queries, $height + 1, null);
     }

     //Checks max-height
     @if $lengthValue - $height >= 2 {
       $maxHeight: nth($queries, $height + 2);
       $maxHeight: validate($maxHeight, $breakpoints);
     }

     @if $maxHeight {
       $maxHeight: $maxHeight - 1px;
       $return-value: map-merge($return-value, (max-height: $maxHeight));
       $queries: set-nth($queries, $height + 2, null);
     }
     //Reset height
     $queries: set-nth($queries, $height, null);
   }

   //Checks for other queries
   @while $count <= length($queries) {
     $key: nth($queries, $count);

     @if $key and $lengthValue - $count >= 1 {
       $value: nth($queries, $count + 1);
       $return-value: map-merge($return-value, (#{$key}: $value));
       $queries: set-nth($queries, $count, null);
       $queries: set-nth($queries, $count + 1, null);
     }

     @else if $key {
       @warn 'Breakpoints is missing value for media feature #{$key}';
     }
     $count: $count + 1;
   }
   @return $return-value;
 }


 /* Validate function
 * ==================================
 * Checks if $query is:
 * $key in the $breakpoints map, number, "max", "max-width" or "max-height" string
 */

 @function validate($query, $breakpoints) {
   $return-value: null;

   @if map-has-key($breakpoints, $query) {
     $return-value: map-get($breakpoints, $query);
   }

   @else if type-of($query) == number {
     $return-value: $query;
   }

   @else if $query == "max" or $query == "max-height" or $query == "max-width" {
     $return-value: 0;
   }

   @else {
     $return-value: null;
   }
   @return $return-value;
 }


 /* Query Mixen
 * ==================================
 * @return map with three keys
 * @returnKey type: Media type
 * @returnKey media-string: media query string
 * @returnKey query-fallback: query fallback (if any)
 */

 @function breakpoint($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {
   $media-string: ();
   $return-value: ();
   $media-map: parse-breakpoint($queries, $breakpoints);

   @each $key, $value in $media-map {
     @if $value and $value != 0 {
       @if $media-string == (()) {
         $media-string: append($media-string, unquote("(#{$key}: #{$value})"));
       }

       @else {
         $media-string: append($media-string, unquote("and (#{$key}: #{$value})"));
       }
     }
   }
   $return-value: (
     type: $type,
     media-string: list-to-string($media-string),
     query-fallback: $query-fallback
   );

   @return $return-value;
 }
